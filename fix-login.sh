#!/bin/bash
set -e

echo "ðŸ”§ FlexWage Login Fix & Deployment Script"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Step 1: Checking dfx installation...${NC}"
if ! command -v dfx &> /dev/null; then
    echo -e "${RED}Error: dfx is not installed. Please install the Internet Computer SDK.${NC}"
    echo "Visit: https://internetcomputer.org/docs/current/developer-docs/setup/install/"
    exit 1
fi
echo -e "${GREEN}âœ“ dfx is installed${NC}"

echo -e "${BLUE}Step 2: Starting local dfx network...${NC}"
# Stop any existing dfx process and start fresh
pkill dfx || true
dfx stop || true
dfx start --clean --background

echo -e "${BLUE}Step 3: Deploying Internet Identity...${NC}"
dfx deploy internet_identity

echo -e "${BLUE}Step 4: Building and deploying FlexWage backend...${NC}"
# Build the Rust backend
dfx build flexwage_backend

# Deploy the backend canister
dfx deploy flexwage_backend

echo -e "${BLUE}Step 5: Getting canister IDs...${NC}"
BACKEND_CANISTER_ID=$(dfx canister id flexwage_backend)
II_CANISTER_ID=$(dfx canister id internet_identity)

echo -e "${GREEN}Backend Canister ID: ${BACKEND_CANISTER_ID}${NC}"
echo -e "${GREEN}Internet Identity Canister ID: ${II_CANISTER_ID}${NC}"

echo -e "${BLUE}Step 6: Updating environment configuration...${NC}"
# Create .env.local file with the correct canister IDs
cat > .env.local << EOF
# Generated by fix-login.sh
CANISTER_ID_FLEXWAGE_BACKEND=${BACKEND_CANISTER_ID}
CANISTER_ID_INTERNET_IDENTITY=${II_CANISTER_ID}
NODE_ENV=development
EOF

echo -e "${GREEN}âœ“ Created .env.local with canister IDs${NC}"

echo -e "${BLUE}Step 7: Testing backend connection...${NC}"
# Test the backend health check
if dfx canister call flexwage_backend health_check; then
    echo -e "${GREEN}âœ“ Backend is responding correctly${NC}"
else
    echo -e "${RED}âœ— Backend is not responding${NC}"
    exit 1
fi

echo -e "${BLUE}Step 8: Installing frontend dependencies...${NC}"
npm install

echo -e "${BLUE}Step 9: Starting Next.js development server...${NC}"
echo -e "${YELLOW}The application will be available at: http://localhost:3000${NC}"
echo -e "${YELLOW}Internet Identity will be available at: http://127.0.0.1:4943/?canisterId=${II_CANISTER_ID}${NC}"
echo ""
echo -e "${GREEN}ðŸŽ‰ Login system is now fixed and ready!${NC}"
echo -e "${GREEN}Key fixes applied:${NC}"
echo -e "${GREEN}  âœ“ Fixed Rust backend UserProfile struct (principal â†’ owner_principal)${NC}"
echo -e "${GREEN}  âœ“ Updated Candid interface to match backend${NC}"
echo -e "${GREEN}  âœ“ Fixed canister ID configuration${NC}"
echo -e "${GREEN}  âœ“ Deployed local Internet Computer network${NC}"
echo -e "${GREEN}  âœ“ Generated proper environment configuration${NC}"
echo ""
echo -e "${BLUE}To test the login:${NC}"
echo -e "1. Open http://localhost:3000"
echo -e "2. Click 'Login with Internet Identity'"
echo -e "3. Create or use an existing Internet Identity"
echo -e "4. Complete the onboarding flow"
echo ""

# Start the development server
npm run dev
